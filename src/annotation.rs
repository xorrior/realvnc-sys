/* automatically generated by rust-bindgen 0.59.2 */

pub const vnc_true: u32 = 1;
pub const vnc_false: u32 = 0;
pub const vnc_success: u32 = 1;
pub const vnc_failure: u32 = 0;
// primitive types
pub type vnc_int8_t = ::std::os::raw::c_schar;
pub type vnc_int16_t = ::std::os::raw::c_short;
pub type vnc_int32_t = ::std::os::raw::c_int;
pub type vnc_int64_t = ::std::os::raw::c_longlong;
pub type vnc_uint8_t = ::std::os::raw::c_uchar;
pub type vnc_uint16_t = ::std::os::raw::c_ushort;
pub type vnc_uint31_t = ::std::os::raw::c_uint;
pub type vnc_uint32_t = ::std::os::raw::c_uint;
pub type vnc_uint64_t = ::std::os::raw::c_ulonglong;
// VNC boolean type
pub type vnc_bool_t = ::std::os::raw::c_int;
pub type vnc_status_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_Connection {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_ConnectionHandler {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_AnnotationManager {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_MessagingManager {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_DisplayManager {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_DataBuffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_Server {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_Viewer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_PixelFormat {
    _unused: [u8; 0],
}
pub type vnc_assert_int8_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_int16_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_int32_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_int64_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_uint8_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_uint16_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_uint31_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_uint32_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_uint64_t = [::std::os::raw::c_char; 1usize];
pub const vnc_DummyEnum_vnc_DummyEnum1: vnc_DummyEnum = 0;
pub const vnc_DummyEnum_vnc_DummyEnum2: vnc_DummyEnum = 1;
pub type vnc_DummyEnum = ::std::os::raw::c_uint;
pub type vnc_assert_DummyEnum = [::std::os::raw::c_char; 1usize];
pub type VncAssertionHandler =
    ::std::option::Option<unsafe extern "C" fn(message: *const ::std::os::raw::c_char)>;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_AnnotationManager_Callback {
    pub availabilityChanged: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            annotationManager: *mut vnc_AnnotationManager,
            isAvailable: vnc_bool_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout_vnc_AnnotationManager_Callback() {
    assert_eq!(
        ::std::mem::size_of::<vnc_AnnotationManager_Callback>(),
        8usize,
        concat!("Size of: ", stringify!(vnc_AnnotationManager_Callback))
    );
    assert_eq!(
        ::std::mem::align_of::<vnc_AnnotationManager_Callback>(),
        8usize,
        concat!("Alignment of ", stringify!(vnc_AnnotationManager_Callback))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vnc_AnnotationManager_Callback>())).availabilityChanged
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vnc_AnnotationManager_Callback),
            "::",
            stringify!(availabilityChanged)
        )
    );
}
extern "C" {
    pub fn vnc_AnnotationManager_setCallback(
        annotationManager: *mut vnc_AnnotationManager,
        callback: *const vnc_AnnotationManager_Callback,
        userData: *mut ::std::os::raw::c_void,
    ) -> vnc_status_t;
    pub fn vnc_AnnotationManager_clear(
        annotationManager: *mut vnc_AnnotationManager,
        fade: vnc_bool_t,
        connection: *mut vnc_Connection,
    ) -> vnc_status_t;
    pub fn vnc_AnnotationManager_clearAll(
        annotationManager: *mut vnc_AnnotationManager,
        fade: vnc_bool_t,
    );
    pub fn vnc_AnnotationManager_isAvailable(
        annotationManager: *mut vnc_AnnotationManager,
    ) -> vnc_bool_t;
    pub fn vnc_AnnotationManager_getPenColor(
        annotationManager: *mut vnc_AnnotationManager,
    ) -> vnc_uint32_t;
    pub fn vnc_AnnotationManager_setPenColor(
        annotationManager: *mut vnc_AnnotationManager,
        color: vnc_uint32_t,
    );
    pub fn vnc_AnnotationManager_getPenSize(
        annotationManager: *mut vnc_AnnotationManager,
    ) -> vnc_uint31_t;
    pub fn vnc_AnnotationManager_setPenSize(
        annotationManager: *mut vnc_AnnotationManager,
        size: vnc_uint31_t,
    );
    pub fn vnc_AnnotationManager_getPersistDuration(
        annotationManager: *mut vnc_AnnotationManager,
    ) -> ::std::os::raw::c_int;
    pub fn vnc_AnnotationManager_setPersistDuration(
        annotationManager: *mut vnc_AnnotationManager,
        durationMs: ::std::os::raw::c_int,
    );
    pub fn vnc_AnnotationManager_getFadeDuration(
        annotationManager: *mut vnc_AnnotationManager,
    ) -> ::std::os::raw::c_int;

    pub fn vnc_AnnotationManager_setFadeDuration(
        annotationManager: *mut vnc_AnnotationManager,
        durationMs: ::std::os::raw::c_int,
    );
    pub fn vnc_AnnotationManager_movePenTo(
        annotationManager: *mut vnc_AnnotationManager,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        penDown: vnc_bool_t,
    ) -> vnc_status_t;
}
