/* automatically generated by rust-bindgen 0.59.2 */

pub const vnc_true: u32 = 1;
pub const vnc_false: u32 = 0;
pub const vnc_success: u32 = 1;
pub const vnc_failure: u32 = 0;
#[doc = " @name Common primitive types */"]
pub type vnc_int8_t = ::std::os::raw::c_schar;
pub type vnc_int16_t = ::std::os::raw::c_short;
pub type vnc_int32_t = ::std::os::raw::c_int;
pub type vnc_int64_t = ::std::os::raw::c_longlong;
pub type vnc_uint8_t = ::std::os::raw::c_uchar;
pub type vnc_uint16_t = ::std::os::raw::c_ushort;
pub type vnc_uint31_t = ::std::os::raw::c_uint;
pub type vnc_uint32_t = ::std::os::raw::c_uint;
pub type vnc_uint64_t = ::std::os::raw::c_ulonglong;
#[doc = " @name Boolean type"]
#[doc = " @details Note that #vnc_true and #vnc_false are guaranteed to be defined as"]
#[doc = " 1 and 0 respectively in all future versions of the SDK.  There is no need to"]
#[doc = " explicitly reference these constants, unless you prefer that coding style."]
pub type vnc_bool_t = ::std::os::raw::c_int;
#[doc = " @name Status type"]
#[doc = " @details Note that #vnc_success and #vnc_failure are guaranteed to be defined"]
#[doc = " as 1 and 0 respectively in all future versions of the SDK.  There is no need"]
#[doc = " to explicitly reference these constants, unless you prefer that coding style;"]
#[doc = " either of these is acceptable:"]
#[doc = ""]
#[doc = " @code"]
#[doc = " if (!vnc_Logger_createFileLogger(\"logfile.txt\"))"]
#[doc = "     handleError();"]
#[doc = " @endcode"]
#[doc = ""]
#[doc = " or:"]
#[doc = " @code"]
#[doc = " if (vnc_Logger_createFileLogger(\"logfile.txt\") != vnc_success)"]
#[doc = "     handleError();"]
#[doc = " @endcode"]
#[doc = ""]
pub type vnc_status_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_Connection {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_ConnectionHandler {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_AnnotationManager {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_MessagingManager {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_DisplayManager {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_DataBuffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_Server {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_Viewer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnc_PixelFormat {
    _unused: [u8; 0],
}
pub type vnc_assert_int8_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_int16_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_int32_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_int64_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_uint8_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_uint16_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_uint31_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_uint32_t = [::std::os::raw::c_char; 1usize];
pub type vnc_assert_uint64_t = [::std::os::raw::c_char; 1usize];
pub const vnc_DummyEnum_vnc_DummyEnum1: vnc_DummyEnum = 0;
pub const vnc_DummyEnum_vnc_DummyEnum2: vnc_DummyEnum = 1;
pub type vnc_DummyEnum = ::std::os::raw::c_uint;
pub type vnc_assert_DummyEnum = [::std::os::raw::c_char; 1usize];
pub type VncAssertionHandler =
    ::std::option::Option<unsafe extern "C" fn(message: *const ::std::os::raw::c_char)>;
extern "C" {
    #[doc = " 32 bits per pixel stored as XXXXXXXXRRRRRRRRGGGGGGGGBBBBBBBB in most"]
    #[doc = "  significant to least significant bit order"]
    pub fn vnc_PixelFormat_rgb888() -> *const vnc_PixelFormat;
}
extern "C" {
    #[doc = " 32 bits per pixel stored as XXXXXXXXBBBBBBBBGGGGGGGGRRRRRRRR in most"]
    #[doc = "  significant to least significant bit order"]
    pub fn vnc_PixelFormat_bgr888() -> *const vnc_PixelFormat;
}
extern "C" {
    #[doc = " 16 bits per pixel stored as RRRRRGGGGGGBBBBB in most significant to least"]
    #[doc = "  significant bit order"]
    pub fn vnc_PixelFormat_rgb565() -> *const vnc_PixelFormat;
}
extern "C" {
    #[doc = " 16 bits per pixel stored as XRRRRRGGGGGBBBBB in most significant to least"]
    #[doc = "  significant bit order"]
    pub fn vnc_PixelFormat_rgb555() -> *const vnc_PixelFormat;
}
extern "C" {
    #[doc = " Gets the total number of bits per pixel."]
    pub fn vnc_PixelFormat_bpp(pf: *const vnc_PixelFormat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets the number of significant bits that are used to store pixel data."]
    pub fn vnc_PixelFormat_depth(pf: *const vnc_PixelFormat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets the maximum value for the red pixel value."]
    pub fn vnc_PixelFormat_redMax(pf: *const vnc_PixelFormat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets the maximum value for the green pixel value."]
    pub fn vnc_PixelFormat_greenMax(pf: *const vnc_PixelFormat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets the maximum value for the blue pixel value."]
    pub fn vnc_PixelFormat_blueMax(pf: *const vnc_PixelFormat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets the number of bits the red pixel value is shifted."]
    pub fn vnc_PixelFormat_redShift(pf: *const vnc_PixelFormat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets the number of bits the green pixel value is shifted."]
    pub fn vnc_PixelFormat_greenShift(pf: *const vnc_PixelFormat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets the number of bits the blue pixel value is shifted."]
    pub fn vnc_PixelFormat_blueShift(pf: *const vnc_PixelFormat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Creates a custom pixel format based on the given parameters."]
    #[doc = ""]
    #[doc = " @param bitsPerPixel The total number of bits per pixel (a multiple of eight)."]
    #[doc = " @param redMax The maximum value for the red pixel value."]
    #[doc = " @param greenMax The maximum value for the red pixel value."]
    #[doc = " @param blueMax The maximum value for the red pixel value."]
    #[doc = " @param redShift The number of bits the red pixel is shifted."]
    #[doc = " @param greenShift The number of bits the green pixel is shifted."]
    #[doc = " @param blueShift The number of bits the blue pixel is shifted."]
    pub fn vnc_PixelFormat_create(
        bitsPerPixel: ::std::os::raw::c_int,
        redMax: ::std::os::raw::c_int,
        greenMax: ::std::os::raw::c_int,
        blueMax: ::std::os::raw::c_int,
        redShift: ::std::os::raw::c_int,
        greenShift: ::std::os::raw::c_int,
        blueShift: ::std::os::raw::c_int,
    ) -> *mut vnc_PixelFormat;
}
extern "C" {
    #[doc = " Destroy a custom pixel format."]
    #[doc = ""]
    #[doc = " @param pf The pixel format object."]
    pub fn vnc_PixelFormat_destroy(pf: *mut vnc_PixelFormat);
}
